plugins {
    id 'java'
    id 'io.quarkus'
    id 'jacoco'
    id "org.sonarqube" version "6.2.0.5505"
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url 'https://jitpack.io'
    }
}

dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
    implementation 'io.quarkus:quarkus-mongodb-panache'
    implementation 'io.quarkus:quarkus-resteasy'
    implementation 'io.quarkus:quarkus-resteasy-jackson'
    implementation 'io.quarkus:quarkus-smallrye-graphql'
    implementation 'io.quarkus:quarkus-arc'
    implementation 'io.quarkus:quarkus-opentelemetry'
    implementation 'io.quarkus:quarkus-undertow'
    implementation 'org.apache.commons:commons-lang3:3.x'
    implementation 'commons-collections:commons-collections:3.2.2'
    implementation ('com.github.Remote-Falcon:remote-falcon-library:dcc2051989') {
        exclude group: "org.springframework.boot", module: "spring-boot-starter-data-mongodb"
    }
    implementation 'io.quarkus:quarkus-smallrye-health'
    implementation 'io.micrometer:micrometer-observation:1.12.0'
    compileOnly 'org.projectlombok:lombok:1.18.36'
    annotationProcessor 'org.projectlombok:lombok:1.18.36'
    testImplementation 'io.quarkus:quarkus-junit5'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.quarkus:quarkus-junit5-mockito'
}

group 'com.remotefalcon'
version '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.required.set(true)
    }
}

test.finalizedBy jacocoTestReport

sonar {
    properties {
        property "sonar.projectKey", "Remote-Falcon_remote-falcon-viewer"
        property "sonar.organization", "remote-falcon"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.encoding = 'UTF-8'
}
